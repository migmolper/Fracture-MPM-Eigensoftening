%\documentclass{svjour3}                     % onecolumn (standard format)
%\documentclass[smallcondensed]{svjour3}     % onecolumn (ditto)
%\documentclass[smallextended]{svjour3}       % onecolumn (second format)
\documentclass{article}  

\usepackage[lofdepth,lotdepth]{subfig}
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage{subfigure} % subfiguras
%
\usepackage{mathptmx}      % use Times fonts if available on your TeX system
%
% insert here the call for the packages your document requires
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{epstopdf}
\usepackage{mathrsfs} % para formato de letra
\usepackage{hyperref}
\usepackage{enumitem}
\usepackage{array}
\usepackage{tabularx}
\usepackage{supertabular}
\usepackage{fancyhdr}
\usepackage{multirow}
\usepackage{color}
\usepackage{makeidx}
\usepackage{xstring}
\usepackage{setspace}
\usepackage{epsfig}

\usepackage{pgf}
% \usepgfplotslibrary{external} 
% \tikzexternalize

%\usepackage{subfigure}
\usepackage{preview}
% Packages to write pseudo-algorithms %
\usepackage{algorithm}
\usepackage{algorithmic}
\usepackage{algpseudocode}


% Tikz
\usepackage{stanli}
\usepackage[ugly]{units}
% \usetikzlibrary{decorations}
% \usetikzlibrary{arrows}
\usetikzlibrary{plotmarks}

\usetikzlibrary{%
    decorations.pathreplacing,%
    decorations.pathmorphing%
}

%\usepackage{latexsym}
% etc.

%

% Matrix and vector nodes

\newcommand{\vec}[1]{
  \ensuremath{\mathbf{{#1}}}
}
\newcommand{\tens}[1]{
  \ensuremath{\mathbf{{#1}}}
}

\newcommand{\Matrix}[1]{
  \ensuremath{\mathbf{{#1}}}
}
\newcommand{\Vector}[1]{
  \ensuremath{\mathbf{{#1}}}
}

% Divergence
\newcommand{\Div}[1]{
  \ensuremath{div({#1})}
}
% Gradient
\newcommand\Grad[1]{grad({#1})}
\newcommand\GradS[1]{grad^s({#1})}
\newcommand\GradT[1]{grad^T({#1})}


% Partial derivative
\newcommand{\Deriv}[3][]{
  \ensuremath{\frac{\partial^{#1}{#2}}{ \partial {#3}^{#1} }}
}

% Integral
\newcommand{\Integral}[2]{
  \IfStrEqCase{#1}{
    {2}{\ensuremath{\int_{\varGamma_d}{#2}\ d\varGamma}}
    {3}{\ensuremath{\int_{\varOmega}{#2}\ d\varOmega}}
  }
}

% 
\begin{document}

% \title{Novel improvements in the Material Point Method to face
%   dynamic problems: 
%   Local-maximum entropy approximation and an explicit predictor-corrector scheme. \thanks{Funding: This
%     study was funded by Agustín de Betancourt Foundation (grant number
%     262390106114).}
% }

\title{Enhanced Material Point Method to face
  dynamic problems:\thanks{Funding: This
    study was funded by Agustín de Betancourt Foundation (grant number
    262390106114).}
}
\subtitle{Local-maximum entropy approximation and explicit
  predictor-corrector scheme}

\titlerunning{Novel improvements in the Material Point Method to face
  dynamic problems.} % if too long for running head

\author{Miguel Molinos \and
  Pedro Navas \and
}

\date{Received: date / Accepted: date}
% The correct dates will be entered by the editor

\maketitle
\begin{abstract}

\end{abstract}

\section{Introduction}
\label{intro}


\section{The meshfree methodology}
\label{sec:meshfree-methodology}


\subsection{Spatial discretization}
\label{sec:spat-discr}

The popularity of MPM has increase notoriously during
the recent years due to its ability to deal with large strain problems
without mesh distorsion issues inherent to mesh based methods like
FEM, see Zdzislaw \cite{Wieckowski2004}. However, in the simulations
made with the original MPM, there are numerical noises when particles
crossing the cell boundaries. Local maximum-entropy (or
local \textit{max-ent}) shape function first introduced by Arroyo \&
Ortiz (2006)\cite{Arroyo2006} has been recently tested under MPM framework
by Wobbes {\it et al.} (2020)\cite{Wobbes2020} where they prof that
simulations performed with the \textit{max-ent} basis functions show
considerably more accurate stress approximations for MPM. Although, in
\cite{Wobbes2020} authors does not deep in how the regularization
parameter $\beta$ affects to the accuracy and stability of the solution.

The basic idea of the shape functions based on such
an estimate is to interpret the shape function $N_I(\vec{x})$ as the
probability of $\vec{x}$ to obtain the value $\vec{x}_I$,  $I=1,
\dots, n$. Here $n$ is the number of nodes in the domain.
This approximation scheme represents a optimal compromise, in the sense of
Pareto, between the \textit{unbiased statistical inference} based on
the nodal data which leads to the principle of \textit{maximum-entropy}
stated by Jaynes \cite{Jaynes1957}, and the definition of local shape
functions of \textit{least width} the least biased shape functions.

Taking the definition of entropy as a measure of how uncertainty a
random variable is averaged on all its possible outcomes. And adopting
the Shannon's entropy as the starting point:
\begin{equation}
  \label{eq:Shannon-entropy}
  H(p_1(\vec{x}),\ldots,p_n(\vec{x})) = -\sum^{N_n}_{I=1}{p_I(\vec{x})\log p_I }
\end{equation}
where $p_I(\vec{x})$ is the probability, equivalent to the mentioned
shape function $N_I(\vec{x})$,  satisfying both the zeroth and
first-order consistency. The least-biased approximation scheme is
given by
\begin{align*}
  \label{eq:least-biased-approximation-scheme}
  \text{(LME)} \hspace{0.15cm} &\text{Maximize} \hspace{0.15cm} H(p) =
  -\sum_{I}^{N_n}{p_I(\vec{x})\log p_I }\\
  &\text{subject to}\
  \begin{cases}
    p_I \ge 0, \hspace{0.15cm} \text{I=1, ..., n} \\[1em]   
    \sum\limits_{I=1}^{N_n}{p_I} = 1 \\[1em]   
    \sum\limits_{I=1}^{N_n}{p_I \vec{x}_I} = \vec{x} \\
  \end{cases}
\end{align*}
The local max-ent approximation schemes (LME) as a Pareto set,
defined by \cite{Arroyo2006} is as follows
\begin{align*}
  \label{eq:LME-scheme-pareto-set}
  \text{(LME)}_{\beta} \hspace{0.15cm} &\text{For fixed} \hspace{0.15cm}
  \vec{x} \hspace{0.15cm} \text{minimise} \hspace{0.15cm} f_{\beta}(\vec{x}, p) = \beta H(\vec{x},p) - H(p) \\
  &\text{subject to}\
  \begin{cases}
    p_I \ge 0, \hspace{0.15cm} \text{I=1, ..., n} \\[1em]   
    \sum\limits_{I=1}^{N_n}{p_I} = 1 \\[1em]   
    \sum\limits_{I=1}^{N_n}{p_I \vec{x}_I} = \vec{x} \\
  \end{cases}
\end{align*}
for $\beta \in (0,\infty)$ is Pareto optimal. The unique solution of
the local max-ent problem (LME)$_\beta$ is: 
\begin{equation}
  \label{eq:LME-p}
p(\vec{x})=\frac{\exp\left[ -\beta \; |\vec{x}-\vec{x}_I|^2 +
    \vec{\lambda} \cdot (\vec{x}-\vec{x}_I) \right] } {Z(\vec{x},\vec{\lambda}^*(\vec{x}))}
\end{equation}
where
\begin{equation}
  \label{eq:LME-Z}
Z(\vec{x}, {\vec{\lambda}}) = \sum_{I=1}^{N_n}{ \exp \left[ -\beta \; |\vec{x}-\vec{x}_I|^2 + \vec{\lambda} \cdot (\vec{x}-\vec{x}_I)  \right]}
\end{equation}
being $\vec{\lambda}^*(\vec{x})$ the unique minimiser  for $\log
Z(\vec{x}, \vec{\lambda})$. In order to obtain the first derivatives of the shape function, it is also necessary to compute~$\nabla p^*_I$ 
\begin{equation}
  \label{eq:LME-grad-p}
\nabla p^*_I=p^*_I  \, \left(\nabla f^*_I-\sum_J^{N_n} p^*_J \, \nabla f^*_J\right)
\end{equation}
where
\begin{equation}
  \label{eq:LME-f}
f^*_I(\vec{x},  \vec{\lambda},\beta)=-\beta \, |\vec{x}-\vec{x}_I|^2 + \vec{\lambda}   \,  (\vec{x}-\vec{x}_I)
\end{equation}
Employing the chain rule, rearranging and considering $\beta$ as a constant, Arroyo and Ortiz~\cite{Arroyo2006} obtained the following expression:
\begin{eqnarray}
\nabla p^*_I &=& -p^*_I \,  (\tens{J}^*)^{-1} \,  (\vec{x} - \vec{x}_I) \label{eq26} 
\end{eqnarray}
%&&\mbox{
where \tens{J} is the Hessian matrix, defined by:
%} \nonumber \\&& \nonumber \\
\begin{eqnarray}
\tens{J}(\vec{x},  \vec{\lambda},\beta) &=& \frac{\partial \vec{r}}{\partial  \vec{\lambda}} \label{eq27} \\ 
%&& \nonumber \\
\vec{r}(\vec{x},\vec{\lambda},\beta) &\equiv& \partial_{\vec{\lambda}}{\log{ Z( \vec{x},\vec{\lambda}})} 
%\nonumber \\ &=&
  =\sum_I^{N_n} p_I(\vec{x},\vec{\lambda},\beta) \, (\vec{x} - \vec{x}_I) \label{eq28} 
\end{eqnarray}
Note that, the objective of the above procedure is to find the
$\vec{\lambda}$ which minimises  $\log Z(\vec{x}, \vec{\lambda})$. The
traditional way to obtain such a minimiser  is using Eq.~(\ref{eq27})
to calculate small increments of $\partial\vec{\lambda}$ in a
Newton-Raphson approach. Similar to alternative non-polynomial meshfree basis functions, the
LME approximation scheme requires more than $d+1$ nodes to determine
the values of the shape functions as well as their derivatives at any
point in the convex hull of the nodal set, where $d$ is the dimension
of the problem. The support size of LME shape functions may be
controlled by adjusting a dimensionless parameter, $\gamma=\beta h^2$
\cite{Arroyo2006} (e.g. two dimensional example shown in figure~\ref{fig:LME_MPM}).
 Since  $p_I$  is defined in the entire domain, in practice, the
function $\exp(-\beta \vec{r} )$ truncated  by  a given tolerance,
10$^{-6}$, for example,  would ensure a reasonable range of
neighbours, see \cite{Arroyo2006} for details. This tolerance defines
the limit values of the influence radius and is used thereafter to
find the neighbour nodes of a given integration point. Regarding this
aspect, an crucial consideration for the implementation of the LME
shape functions in MPM is exposed. To avoid the transference of
particle information to those nodes fare apart from the particle
domain $\Omega_p$, a especial treatment of the neighbour nodes for
those particles close to the boundary is required. It consists in
select only those nodes which position $\vect{x}_I$ lies inside of the
domain $\Omega$. This can be performed by employing the nodal
connectivity of the background mesh. And activating for computing only
those nodes whose element has a particle inside of it as we can see in
figure~\ref{fig:Particle-discretization}. 

Due to the FE-compatibility, the LME shape function is degenerated to
linear finite element shape function if $d+1$ neighbouring nodes are
chosen as the support. Furthermore, with a conveniently adopted
\textit{regularization} parameter it is possible to get a GIMP-like
shape function. A proof of this statements is observed in figure~\ref{fig:LME_MPM}.  

In this research and in \cite{Arroyo2006}, $\Beta$ is a scalar as the
influence area of the shape function is controlled by the Euclidean
norm, therefore the search area is geometrically a circle in 2D, or a
sphere in 3D. Building upon the idea of anisotropic shape functions,
\cite{Kochmann2019} introduced an enhanced version of the original
local max-ent scheme, which uses an anisotropic support to deal with
tensile inestability. Nonetheless this is out of the scope of the
present document but will be incorporated in future research.


\subsection{Temporal discretization}
\label{sec:temp-discr}

In this section, a explicit predictor-corrector time integration
scheme is presented. It is based in the Newmark a-form 
$\gamma = 0.5$ and $\beta = 0$ which is the central difference
explicit. This method is devoted to solve a system of equations of the type
\begin{equation*}
  \Matrix{M}_{IJ}\ddot{\Vector{d}}_{J} + \Matrix{C}_{IJ}\dot{\Vector{d}}_{J} +
  \Matrix{K}_{IJ}\Vector{d}_{J} = \Vector{F}_{I}.
\end{equation*}
As MPM has a nodal stage, it is possible to apply this methods
successfully in MPM framework as was proved by
\cite{Tran2019e}. Taking the predictor definition from and calculating
nodal velocity, and updating particles position employing nodal values
of velocity and acceleration. The predictor-corrector algorithm has
been described in the classic literature \cite{Hughes2000}, and its
computational advantages and stability were widely proof by Liu
\cite{Xiaojian94}. The ``classic'' PCE algorithm starts with a
predicted value of the nodal velocity at the $(k+1)$th time step denoted by $\vec{\tilde{v}}_I^{k+1}$ given as,
\begin{equation}
  \label{eq:Predictor-velocity-I}
  \vec{\tilde{v}}_I^{k+1} = \vec{v}_I^k + (1 - \gamma)\ \Delta t\ \vec{a}_I^k
\end{equation}
In \eqref{eq:Predictor-velocity-I} arise a \textit{user-defined}
parameter $\gamma \geq 0$. This parameter influences both the predictor accuracy
and the stability of the algorithm. As point out Liu
\cite{Xiaojian94}, the truncation error of the predictor formula is
$O(\Delta t^3)$ when $\gamma = 0.5$, and is unconditionally stable if
$ 0 < \gamma \leq 0.25$.

To accommodate this step to MPM framework, it is necessary to get
the nodal values of the velocity and acceleration throughout a variational
recovery process where particles quantities are transferred to the
mesh nodes. This technique arise as a generalization of the super-convergent recovery
procedures described by Zienkiewicz \& Zhu \cite{ZZ1992_I} (\textit{ZZ})
in the context of FEM. In MPM Gauss quadrature is not employed as
integrals are computed following the Riemann integral definition,
where each component of the summation correspond to a particle of the
discretization. Also Bardenhagen \& Kober \cite{Bardenhagen2004}
proved that thorough this information-transference technique mass and momentum are conserved. So for a general particle variable $\Phi_p$ employing the
\textit{ZZ} technique is possible to get its nodal homologous $\Phi_I$  as,
\begin{equation}
  \label{eq:Variational-recovery}
   \Phi_I = \frac{m_p N_{Ip} \Phi_p}{m_I}
 \end{equation}
 Therefore, to get a analogous expression for
 \eqref{eq:Predictor-velocity-I} in the context of MPM, the
 procedure described in the equation \eqref{eq:Variational-recovery}
 is employed reaching to,
 \begin{equation}
   \label{eq:Predictor-velocity-II}
   \vec{\tilde{v}}_I^{k+1} = \underbrace{\frac{N_{Ip}^{k} m_p
       \vec{v}_p^k}{m_I}}_{\vec{v}_I^{k}} + (1 - \gamma)\ \Delta t\  \underbrace{\frac{N_{Ip}^{k} m_p \vec{a}_p^k}{m_I}}_{\vec{a}_I^{k}}
 \end{equation}
Nonetheless this way of computing the predictor stage can introduce
instabilities due to numerical cancellation likewise the original
Sulky algorithm. Thankfully this can be avoided easily by the
equivalent formulation \eqref{eq:Predictor-velocity-II}, 
\begin{equation}
  \label{eq:Predictor-velocity-II}
  \vec{\tilde{v}}_I^{k+1} = \frac{ N_{Ip}^{k} m_p (\vec{v}_p^k + (1 - \gamma)\ \Delta t\ \vec{a}_p^k)}{m_I}
\end{equation}
This way of computing the nodal predictor is both numerically stable
and minimize the computational effort. Once nodal velocity are
obtained, the essential boundary conditions are imposed. And in the
following, the ``classic'' MPM algorithm continues to reach to the
equilibrium equation \eqref{eq:particle_balance_forces3}. Here we
continue with the \textit{corrector} stage, due to the fact that we
already have nodal velocity, this step is computed in the same way as
in FEM,
\begin{equation}
  \label{eq:Corrector-velocity}
  \vec{v}_{I}^{k+1} = \vec{v}_{I}^{pred} + \gamma\ \Delta t\ \frac{\vec{f}_{I}^{k+1}}{\tens{m}_I^{k+1}}
\end{equation}
Finally updated particle kinetics are computed using nodal values as,
\begin{align}
  \label{eq:Update-lagrangian-pce}
        &\vec{a}_p^{k+1} = \frac{N_{Ip}^k\vec{f}_{I}^{k}}{\tens{m}_I^k}\\
      &\vec{v}_p^{k+1} = \vec{v}_p^n + \Delta t\
        \frac{N_{Ip}^k\
        \vec{f}_{I}^{k}}{\tens{m}_I^k}\\
      &\vec{x}_p^{k+1} = \vec{x}_p^n + \Delta t\
         N_{Ip}^k\ \vec{v}_{I}^{k} +
        \frac{1}{2}\Delta t^2\ \frac{N_{Ip}^k\
        \vec{f}_{I}^{k}}{\tens{m}_I^k} 
\end{align}
Notice that particle displacement is computed using the corrected
nodal velocities and the accelerations computed with the velocities
of the predictor. However, particles velocities and accelerations
are computed using the corrected velocities. Therefore here we share similarities
with the \textit{leapfrog integration} which updates the position at
full time step, but updates the velocity at half time steps. Notice
also that with this approach the calculation of nodal momentum values
are not required. Due to its simplicity allows be implemented with minor modifications
over a standard forward Euler. It is summarized in shape of
pseudo-algorithm.

\subsection{Eigensoftening algorithm}
\label{sec:eigens-algor}

Within the context of MPM formulation, fracture can be modelled by
failing particles according to a suitable criterion. When material
points are failed, they are assumed to have a null stress tensor. 

The eigenerosion algorithm

\begin{align}
  \label{eq:energy-release-EE}
&G_p^{k+1} = \frac{C_{\epsilon}}{m_p^{k+1}}  \sum_{x_q^{k+1} \in
  B_{\epsilon}(x_p^{k+1})} m_q W_q^{k+1}\\
&m_p^{k+1} =  \sum_{x_q^{k+1} \in
  B_{\epsilon}(x_p^{k+1})} m_q  
\end{align}

The eigensoftening algorithm

\begin{equation}
  \label{eq:variation-averaged-strain-energy-density}
  \delta W_{p,\epsilon} = \frac{\partial G_p}{C_{\epsilon}} =
  \frac{1}{m_p} \sum_{x_q^{k+1} \in
  B_{\epsilon}(x_p^{k+1})} m_q \tens{\sigma}_{q,I} \delta \tens{\epsilon}_q
\end{equation}

\begin{equation}
  \label{eq:variation-averaged-strain-energy-density-simpli}
  \delta W_{p,\epsilon} =
  \frac{\delta \tens{\epsilon}_p}{m_p} \sum_{x_q^{k+1} \in
  B_{\epsilon}(x_p^{k+1})} m_q \tens{\sigma}_{q,I} 
\end{equation}

\begin{equation}
  \label{eq:equivalent-critical-stress}
  \delta \tens{\sigma}_{p,c} =
  \frac{1}{m_p} \sum_{x_q^{k+1} \in
  B_{\epsilon}(x_p^{k+1})} m_q \tens{\sigma}_{q,I} 
\end{equation}


\appendix

\section{Explicit Predictor-Corrector algorithm}
\label{sec:expl-pred-corr}

\begin{algorithm}
  \floatname{algorithm}{Algorithm}
  \renewcommand{\thealgorithm}{}
  \caption{Explicit Predictor-Corrector scheme}
  \begin{algorithmic}[1]
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% º
    \STATE \textbf{Update mass matrix}:
    \begin{equation*}
      \tens{m}_{I} = N_{Ip}^{k}\ m_p,
    \end{equation*}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    \STATE \textbf{Explicit Newmark Predictor}:\\
    \begin{equation*}
      \vec{v}_I^{pred} = \frac{ N_{Ip}^{k} m_p (\vec{v}_p^k + (1 - \gamma)\ \Delta t\ \vec{a}_p^k)}{m_I}
    \end{equation*}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    \STATE \textbf{Impose essential boundary conditions}:\\
    At the fixed boundary, set $\vec{v}_{I}^{pred} = 0$. 
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    % \STATE \textbf{Discard the previous nodal values}.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    \STATE \textbf{Deformation tensor increment calculation}.
    \begin{align*}
      &\dot{\tens{\varepsilon}_{p}}^{k+1} = \left[ \vec{v}_{I}^{pred} \otimes
        \Grad{N_{Ip}^{k+1}} \right]^s \\
      &\Delta \tens{\varepsilon}_{p}^{k+1} = \Delta t\ \dot{\tens{\varepsilon}_{p}}^{k+1}
    \end{align*}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    \STATE \textbf{Update the density field}:
    \begin{equation*}
      \rho_p^{k+1} = \frac{\rho_p^k}{1 + \mathit{tra}\left[\Delta\tens{\varepsilon}_{p}^{k+1}\right]}.
    \end{equation*}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    \STATE \textbf{Compute damage parameter}:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    \STATE \textbf{Balance of forces calculation}:\\
    Calculate the total grid nodal force $\vec{f}_{I}^{k+1} =
    (1-\chi)\vec{f}_{I}^{int,k+1} + \vec{f}_{I}^{ext,k+1}$ evaluating
    \eqref{eq:nodal_internal_forces} and
    \eqref{eq:nodal_external_forces} in the time step $k+1$.
    In the grid node $I$ is fixed in one of the spatial dimensions, set it to
    zero to make the grid nodal acceleration zero in that direction.\\
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    \STATE \textbf{Explicit Newmark Corrector}:
    \begin{equation*}
      \vec{v}_{I}^{k+1} = \vec{v}_{I}^{pred} + \gamma\ \Delta t\ \frac{\vec{f}_{I}^{k+1}}{\tens{m}_I^{k+1}}  
    \end{equation*}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \STATE \textbf{Update particles lagrangian quantities}:
    \begin{align*}
      &\vec{a}_p^{k+1} = \frac{N_{Ip}^k\vec{f}_{I}^{k}}{\tens{m}_I^k}\\
      &\vec{v}_p^{k+1} = \vec{v}_p^n + \Delta t\
        \frac{N_{Ip}^k\
        \vec{f}_{I}^{k}}{\tens{m}_I^k}\\
      &\vec{x}_p^{k+1} = \vec{x}_p^n + \Delta t\
         N_{Ip}^k\ \vec{v}_{I}^{k} +
        \frac{1}{2}\Delta t^2\ \frac{N_{Ip}^k\
        \vec{f}_{I}^{k}}{\tens{m}_I^k}
    \end{align*}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    \STATE \textbf{Reset nodal values}
  \end{algorithmic}
\end{algorithm} 

\section{Eigensoftening Algorithm}
\label{sec:eigens-algor-1}

\begin{algorithm}\caption{Compute damage parameter $\chi_P^{k+1}$}\label{alg-eigens}
  \begin{algorithmic}
    \REQUIRE Particle status\\
    Number of particles: $N_p$\\
    $\epsilon$-neighbourhood of each particle $p$ : $B_{\epsilon,p}$\\
    \REQUIRE Material data\\
    Tensile strength: $f_{t,p}$\\
    Bandwidth of the cohesive fracture: $h_{\epsilon,p}$ \\
    Critical opening displacement: $w_c$\\ 
    \ENSURE Return damage parameter $\chi := \{\chi_p\}$
    \STATE $\chi_p \leftarrow \chi_p^{k}$
    \FOR{$p$ to $N_p$}
    \IF{$\chi_p = 0$ \AND $\epsilon_{f,p} = 0$}
    \FOR{$q \in B_{\epsilon,p}$}
    \IF{$\chi_q < 1$}    
    \STATE $\sum m_p\sigma_{p,I} \leftarrow \sum m_p\sigma_{p,I} + m_q\sigma_{q,I}$
    \ENDIF    
    \STATE $m_p \leftarrow m_p + m_q$
    \ENDFOR
    \STATE $\sigma_{p,\epsilon} \leftarrow \frac{1}{m_p} \sum m_p\sigma_{p,I}$
    \IF{$\sigma_{p,\epsilon} > f_{t,p}$}
    \STATE $\epsilon_{f,p} = \epsilon_{I,p}$   
    \ENDIF        
    \ELSE[$\chi_p \neq 1$ \AND $\epsilon_{f,p} > 0$]
    \STATE $\chi_p^{k+1} \leftarrow \min\Big \{1 , \max \{\chi_p^{k},
    \frac{(\epsilon_{I,p}- \epsilon_{f,p})\ h_{\epsilon,p}}{w_c} \} \Big \}$    
    \ENDIF    
    \ENDFOR
  \end{algorithmic}
\end{algorithm}



% BibTeX users please use one of
%\bibliographystyle{spbasic}      % basic style, author-year citations
\bibliographystyle{spmpsci}      % mathematics and physical sciences
%\bibliographystyle{spphys}       % APS-like style for physics
\bibliography{Biblio/Biblio}   % name your BibTeX data base

\end{document}
% end of file template.tex


%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:

